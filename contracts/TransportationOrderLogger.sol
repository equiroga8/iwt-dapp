// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.7.0 <0.9.0;


/**
 * @title Transport Order Logger
 * @author equiroga8
 * This contract logs all the events generated by the transportation order contracts.
 **/
 
contract TransportationOrderLogger {
    
    event OrderCreationRequest(address contractAddr, address clientDID);
    
    function orderCreationRequestEvent(address _orderAddress) public {
        emit OrderCreationRequest(_orderAddress, tx.origin);
    }
    
    event OrderVerificationResult(address contractAddr, address clientDID, bool success);
    
    function orderVerificationResultEvent(address _orderAddress, address _clientDID, bool _success) public {
        emit OrderVerificationResult(_orderAddress, _clientDID, _success);
    }
    
    event OrderAssignmentRequest(address contractAddr, address operatorDID, bytes32 uuid);
    
    function orderAssignmentRequestEvent(address _orderAddress, address _operatorDID, bytes32 _uuid) public {
        emit OrderAssignmentRequest(_orderAddress, _operatorDID, _uuid);
    }
    
    event OrderAssigned(address orderAddress, address operatorDID);
    
    function orderAssignedEvent(address _orderAddress, address _operatorDID) public {
        emit OrderAssigned(_orderAddress, _operatorDID);
    }
    
    event InspectorOriginRoleRequest(address orderAddress, address _did, bytes32 uuid);
    
    function inspectorOriginRoleRequestEvent(address _orderAddress, address _inspectorOriginDID, bytes32 _uuid) public {
        emit InspectorOriginRoleRequest(_orderAddress, _inspectorOriginDID, _uuid);
    }
    
    event InspectorOriginRoleAssigned(address orderAddress, address _did);

    function inspectorOriginRoleAssignedEvent(address _orderAddress, address _inspectorOriginDID) public {
        emit InspectorOriginRoleAssigned(_orderAddress, _inspectorOriginDID);
    }
    
    event GaugerRoleRequest(address orderAddress, address _did, bytes32 uuid);
    
    function gaugerRoleRequestEvent(address _orderAddress, address _gaugerDID, bytes32 _uuid) public {
        emit GaugerRoleRequest(_orderAddress, _gaugerDID, _uuid);
    }

    
    
    event GaugerRoleAssigned(address orderAddress, address _did);
    
    function gaugerRoleAssignedEvent(address _orderAddress, address _gaugerDID) public {
        emit GaugerRoleAssigned(_orderAddress, _gaugerDID);
    }


    event GaugeRequested(address orderAddress, address _did);
    
    function gaugeRequestedEvent(address _orderAddress, address _gaugerDID) public {
        emit GaugeRequested(_orderAddress, _gaugerDID);
    }

    event OriginEmptyGaugeRegistered(address orderAddress);
    
    function originEmptyGaugeRegisteredEvent(address _orderAddress) public {
        emit OriginEmptyGaugeRegistered(_orderAddress);
    }

    event OriginFullGaugeRegistered(address orderAddress);
    
    function originFullGaugeRegisteredEvent(address _orderAddress) public {
        emit OriginFullGaugeRegistered(_orderAddress);
    }
    
    event InspectorDestinationRoleRequest(address orderAddress, address _did, bytes32 uuid);
    
    function inspectorDestinationRoleRequestEvent(address _orderAddress, address _inspectorDestinationDID, bytes32 _uuid) public {
        emit InspectorDestinationRoleRequest(_orderAddress, _inspectorDestinationDID, _uuid);
    }
    
    event InspectorDestinationRoleAssigned(address orderAddress, address _did);

    function inspectorDestinationRoleAssignedEvent(address _orderAddress, address _inspectorDestinationDID) public {
        emit InspectorDestinationRoleAssigned(_orderAddress, _inspectorDestinationDID);
    }

    event DestinationEmptyGaugeRegistered(address orderAddress);
    
    function destinationEmptyGaugeRegisteredEvent(address _orderAddress) public {
        emit DestinationEmptyGaugeRegistered(_orderAddress);
    }

    event DestinationFullGaugeRegistered(address orderAddress);
    
    function destinationFullGaugeRegisteredEvent(address _orderAddress) public {
        emit DestinationFullGaugeRegistered(_orderAddress);
    }
}